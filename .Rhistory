#    maidens=maidens+1
#}
return(data.frame(Bowler=bname,O=tot_overs,R=tot_runs,W=tot_wickets,ECO=economy,NB=no_balls,WD=wides))
}
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
View(df)
df_fix=read.csv(file.choose())
View(df_fix)
v=df_fix[13,]
View(v)
v$Margin
v$Team.1==v$Winner
df_fix=read.csv(file.choose(),stringsAsFactors = F)
v=df_fix[13,]
View(v)
v$Team.1==v$Winner
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
vs=paste(v$Team.1,v$Team.2,sep = " vs ")
res=paste(v$Winner,v$Margin,sep=" won by ")
ground=v$Ground
date_match=v$Match.Date
if(substr(v$Margin,(stri_locate(pattern = " ", as.character(v$Margin), fixed = TRUE)[1])+1,nchar(v))=="runs")
innings=paste(v$Winner,"batting",sep = " ")
else
{
if(v$Team.1!=winner)
innings=paste(v$Team.1,"batting",sep=" ")
else
innings=paste(v$Team.2,"batting",sep=" ")
}
t(data.frame(Fixture=vs,Result=res,Ground=ground,Date=date_match,Current_innings=innings))
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
vs=paste(v$Team.1,v$Team.2,sep = " vs ")
res=paste(v$Winner,v$Margin,sep=" won by ")
ground=v$Ground
date_match=v$Match.Date
if(substr(v$Margin,(stri_locate(pattern = " ", as.character(v$Margin), fixed = TRUE)[1])+1,nchar(v))=="runs")
innings=paste(v$Winner,"batting",sep = " ")
else
{
if(v$Team.1!=Winner)
innings=paste(v$Team.1,"batting",sep=" ")
else
innings=paste(v$Team.2,"batting",sep=" ")
}
vs=paste(v$Team.1,v$Team.2,sep = " vs ")
res=paste(v$Winner,v$Margin,sep=" won by ")
ground=v$Ground
date_match=v$Match.Date
if(substr(v$Margin,(stri_locate(pattern = " ", as.character(v$Margin), fixed = TRUE)[1])+1,nchar(v))=="runs")
innings=paste(v$Winner,"batting",sep = " ")
else
{
if(v$Team.1!=v$Winner)
innings=paste(v$Team.1,"batting",sep=" ")
else
innings=paste(v$Team.2,"batting",sep=" ")
}
rm(innings)
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
rm(list=ls())
shiny::runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
df_fix=read.csv(file.choose(),stringsAsFactors = F)
v=df_fix[input$match_no,]
v=df_fix[13,]
vs=paste(v$Team.1,v$Team.2,sep = " vs ")
res=paste(v$Winner,v$Margin,sep=" won by ")
ground=v$Ground
date_match=v$Match.Date
if(substr(v$Margin,(stri_locate(pattern = " ", as.character(v$Margin), fixed = TRUE)[1])+1,nchar(v))=="runs")
{
innings1=paste(v$Winner,"batting 1st",sep = " ")
if(v$Team.1!=v$Winner)
innings2=paste(v$Team.1,"batting 2nd",sep = " ")
else
innings2=paste(v$Team.2,"batting 2nd",sep = " ")
}
else
{
innings2=paste(v$Winner,"batting 2nd",sep=" ")
if(v$Team.1!=v$Winner)
innings1=paste(v$Team.1,"batting 1st",sep = " ")
else
innings1=paste(v$Team.2,"batting 1st",sep = " ")
}
if(substr(v$Margin,(stri_locate(pattern = " ", as.character(v$Margin), fixed = TRUE)[1])+1,nchar(v))=="runs")
{
innings1=paste(v$Winner,"batting 1st",sep = " ")
ifelse(v$Team.1!=v$Winner,innings2=paste(v$Team.1,"batting 2nd",sep = " "),innings2=paste(v$Team.2,"batting 2nd",sep = " "))
}
else
{
innings2=paste(v$Winner,"batting 2nd",sep=" ")
ifelse(v$Team.1!=v$Winner,innings1=paste(v$Team.1,"batting 1st",sep = " "),innings1=paste(v$Team.2,"batting 1st",sep = " "))
}
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
vs=paste(v$Team.1,v$Team.2,sep = " vs ")
res=paste(v$Winner,v$Margin,sep=" won by ")
ground=v$Ground
date_match=v$Match.Date
if(v$Team.1!=v$Winner)
Loser=v$Team.1
else
Loser=v$Team.2
if(substr(v$Margin,(stri_locate(pattern = " ", as.character(v$Margin), fixed = TRUE)[1])+1,nchar(v))=="runs")
{
innings1=v$Winner
innings2=Loser
#ifelse(v$Team.1!=v$Winner,innings2=paste(v$Team.1,"batting 2nd",sep = " "),innings2=paste(v$Team.2,"batting 2nd",sep = " "))
}
else
{
innings1=Loser
innings2=v$Winner
#ifelse(v$Team.1!=v$Winner,innings1=paste(v$Team.1,"batting 1st",sep = " "),innings1=paste(v$Team.2,"batting 1st",sep = " "))
}
vs=paste(v$Team.1,v$Team.2,sep = " vs ")
res=paste(v$Winner,v$Margin,sep=" won by ")
ground=v$Ground
date_match=v$Match.Date
ifelse(v$Team.1!=v$Winner,Loser=v$Team.1,Loser=v$Team.2)
if(substr(v$Margin,(stri_locate(pattern = " ", as.character(v$Margin), fixed = TRUE)[1])+1,nchar(v))=="runs")
{
innings1=v$Winner
innings2=Loser
#ifelse(v$Team.1!=v$Winner,innings2=paste(v$Team.1,"batting 2nd",sep = " "),innings2=paste(v$Team.2,"batting 2nd",sep = " "))
}
else
{
innings1=Loser
innings2=v$Winner
#ifelse(v$Team.1!=v$Winner,innings1=paste(v$Team.1,"batting 1st",sep = " "),innings1=paste(v$Team.2,"batting 1st",sep = " "))
}
if(substr(v$Margin,(stri_locate(pattern = " ", as.character(v$Margin), fixed = TRUE)[1])+1,nchar(v))=="runs")
{
innings1=v$Winner
innings2=Loser
}
else
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
if(substr(v$Margin,(stri_locate(pattern = " ", as.character(v$Margin), fixed = TRUE)[1])+1,nchar(v))=="runs")
{
innings1=v$Winner
innings2=Loser
}
else
{
innings1=Loser
innings2=v$Winner
}
if(substr(v$Margin,(stri_locate(pattern = " ", as.character(v$Margin), fixed = TRUE)[1])+1,nchar(v))=="runs")
{
innings1=v$Winner
innings2=Loser
} else
{
innings1=Loser
innings2=v$Winner
}
t(data.frame(Fixture=vs,Result=res,Ground=ground,Date=date_match,Firstinnings=innings1,Secondinnings=innings2))
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
rm(list=ls())
runApp('C:/Users/asus/Desktop/Big Bash/shiny app/Cricket')
shiny::runApp('C:/Users/asus/Desktop/Big Bash/Cricket')
runApp('C:/Users/asus/Desktop/Big Bash/Cricket')
rm(list=ls())
rm(list=ls())
install.packages("reshape2")
rm(list=ls())
df=read.csv("C:\\Users\\asus\\Desktop\\file.csv")
library(dplyr)
library(reshape2)
rm(list=ls())
ratings=read.csv("C:\\Users\\asus\\Desktop\\file.csv")
View(ratings)
str(ratings
)
levels(ratings$critic)
levels(ratings$title)
sort(unique(ratings$rating),decreasing = F)
movie_ratings=acast(ratings,title~critic,value.var = "rating")
View(movie_ratings)
sim_users=cor(movie_ratings[,1:6],use = "complete.obs")
library(data.table)
levels(ratings$critics)
levels(ratings$critic)
library(recommenderlab)
x=1:8
n=8
y=c(200,250,210,160,220,280,240,175)
xy=x*y
x2=x ** 2
b=(x*xy- sum(x)*sum(y))/(n*sum(x2)-sum(x2))
b=(x*sum(xy)- sum(x)*sum(y))/(n*sum(x2)-sum(x2))
b=(n*sum(xy)- sum(x)*sum(y))/(n*sum(x2)-sum(x2))
a=mean(y)-b*mean(x)
rm(list=ls())
y=c(200,250,210,160,220,280,240,175)
myts=ts(y,start = c(2016,1),end=c(2017,4),frequency = 4)
x=1:8
model=lm(y~x)
summary(model)
plot.ts(myts)
y
(200+250+210+160)/4
(250+210+160+220)/4
(160+220+280+240)/4
(220+280+240+175)/4
summary(model)
rm(list=ls())
df=read.csv('petrolPricecomplete.csv',stringsAsFactors = F)
setwd('C:\\Users\\asus\\Desktop\\Petrol Prices TS') #change this
df=read.csv('petrolPricecomplete.csv',stringsAsFactors = F)
View(df)
library(zoo)
zoo(visitors, seq(from = as.Date("2003-06-01"), to = as.Date("2018-08-28"), by = 1))
zoo(df$y, seq(from = as.Date("2003-06-01"), to = as.Date("2018-08-28"), by = 1))
my_ts=zoo(df$y, seq(from = as.Date("2003-06-01"), to = as.Date("2018-08-28"), by = 1))
library(ggplot2)
plot(my_ts)
plot(decompose((my_ts)))
is.regular(my_ts, strict = TRUE);
na.fail(df$y)
na.fail(df$ds)
sum(is.na(my_ts))
plot(decompose((my_ts)))
plot(forecast(auto.arima(my_ts)),h=90)
install.packages("forecast")
#creating TS object
#inds <- seq(as.Date("2003-06-01"), as.Date("2018-08-28"), by = "day")
library(forecast)
plot(forecast(auto.arima(my_ts)),h=90)
plot(forecast(auto.arima(my_ts)),h=20)
warnings()
time(my_ts)
plot(my_ts)
plot(tsclean(my_ts))
plot(my_ts)
my_ts=tsclean(my_ts)
plot(my_ts)
ets_model=ets(my_ts)
ets_model
plot(my_ts)
plot(my_ts)
lines(ets_model$fitted, col="red")
plot(my_ts,lwd=3)
lines(ets_model$fitted, col="red")
plot(forecast(ets_model,h=90))
plot(forecast(ets_model,h=90,level = 95))
new_prices=forecast(ets_model,h=90,level = 95)
new_prices$mean
class(new_prices$mean)
library(lubridate)
plot(new_prices$mean)
day(new_prices$mean)
date_decimal(new_prices$mean)
getTStime <- function(ats){
start <- start(ats)
end <- end(ats)
time <- list()
time[[1]] <- start
m <- 2
while(!(identical(start, end))){
start[2] <- start[2] + 1
if (start[2]==13){
start[1] <- start[1] + 1
start[2] <- 1
}
time[[m]] <- start
m <- m + 1
}
return(time)
}
getTStime(new_prices$mean)
print(new_prices$mean)
as.Date(new_prices$mean)
unclass(new_prices$mean)
day(new_prices$mean[1])
day(new_prices$mean[1],origin="01-01-1970")
as.POSIXct.POSIXlt(new_prices$mean)
as.data.frame(new_prices$mean)
df_final=as.data.frame(new_prices$mean)
start(new_prices$mean)
my_ts_final=ts(data = df_final$x,start=c(2018,9,29),frequency = 365)
my_ts_final
my_ts=ts(df$y, start = c(2003,6,1) , frequency=365.25)
plot(my_ts)
my_ts=tsclean(my_ts)
plot(my_ts)
ets_model=ets(my_ts)
plot(my_ts,lwd=3)
lines(ets_model$fitted, col="red")
plot(forecast(ets_model,h=90,level = 95))
new_prices=forecast(ets_model,h=90,level = 95)
plot(new_prices$mean)
my_ts_final=ts(data = df_final$x,start=c(2018,9,29),frequency = 365)
my_ts_final=ts(data = df_final$x,start=c(2018,9,29),frequency = 365.25)
my_ts_final
df_final=as.data.frame(ds=NA,y=new_prices$mean)
View(df_final)
df_final=as.data.frame(ds=0,y=new_prices$mean)
class(new_prices$mean)
as.numeric(new_prices$mean)
df_final=as.data.frame(ds=0,y=as.numeric(new_prices$mean))
df_final=data.frame(ds=0,y=as.numeric(new_prices$mean))
seq(as.Date("2018-09-29"), by="days",length.out = 90)
seq(as.Date("2018-09-29"), by="days",length.out = 95)
df_final$ds=seq(as.Date("2018-09-29"), by="days",length.out = 90)
write.csv(df_final,"PetrolPrices90days.csv",row.names = F)
plot(my_ts)
#ARIMA
plot(log(my_ts))
#ARIMA
plot(diff(log(my_ts)))
acf(my_ts)#find p d q
acf(diff(log(my_ts)))
pacf(diff(log(my_ts)))
plot(my_ts,lwd=3)
plot(my_ts)
#ARIMA
tsdisplay(my_ts)
#creating TS object
#inds <- seq(as.Date("2003-06-01"), as.Date("2018-08-28"), by = "day")
library(forecast)
#ARIMA
tsdisplay(my_ts)
auto.arima(my_ts)
#ARIMA
Box.test(my_ts)
acf(my_ts)
library(tseries)
#ARIMA
d.y=diff(my_ts)
summary(my_ts$y)
adf.test(my_ts,alternative = "stationay",k=0)
adf.test(my_ts,alternative = "stationary",k=0)
adf.test(d.y,k=0)
acf(my_test)
acf(my_ts)
pacf(my_ts)
acf(d.y)
pacf(d.y)
arima(my_ts,c(1,0,0))
arima(my_ts,c(2,0,0))
arima(my_ts,c(2,0,0))
arima(my_ts,c(1,0,1))
arima(d.y,c(0,0,1))
arima(d.y,c(1,0,1))
arima(d.y,c(1,0,2))
arima(d.y,c(1,0,1))
arima(d.y,c(0,0,2))
arima(d.y,c(0,0,3))
arima(d.y,c(0,0,2))
arima(d.y,c(1,0,2))
arima(d.y,c(0,0,2))
auto.arima(my_ts)
arima(my_ts,c(2,0,0))
#ARIMA
rm(d.y)
#ARIMA
arima_model=auto.arima(my_ts)
arima_model
plot(my_ts,lwd=3)
lines(arima_model$fitted,col="red")
plot(forecast(arima_model,h=90,level = 95))
new_prices=forecast(arima_model,h=90,level = 95)
new_prices$mean
plot(new_prices$mean)
rm(list=ls())
setwd('C:\\Users\\asus\\Desktop\\Petrol Prices TS') #change this
df=read.csv('petrolPricecomplete.csv',stringsAsFactors = F)
#creating TS object
#inds <- seq(as.Date("2003-06-01"), as.Date("2018-08-28"), by = "day")
library(forecast)
library(zoo)
library(lubridate)
library(tseries)
my_ts=ts(df$y, start = c(2003,6,1) , frequency=365.25)
my_ts=tsclean(my_ts)
plot(my_ts)
#Split test and train
train=window(my_ts,start=2004,end=2017)
#Split test and train
train=window(my_ts,start=2004,end=2016)
test=window(my_ts,start=2016,end=2018)
plot(window(my_ts,start=2016),lwd=3)
#ETS
ets_model=ets(train)
ets_model
lines(ets_model$fitted, col="red")
plot(forecast(ets_model,h=90,level = 95))
plot(new_prices$mean)
new_prices=forecast(ets_model,h=90,level = 95)
new_prices$mean
plot(new_prices$mean)
#check accuracy of the model
accuracy(ets_model,test)
ets_model
#check accuracy of the model
accuracy(ets_model,test)
as.numeric(test)
#check accuracy of the model
accuracy(ets_model,as.numeric(test``))
#check accuracy of the model
accuracy(ets_model,as.numeric(test))
plot(window(my_ts,start=2016),lwd=3)
test=window(my_ts,start=2016)
#ETS
ets_model=ets(train)
#ETS
ets_model=ets(train,model="AAM")
#ETS
ets_model=ets(train,model="AAA")
#ETS
ets_model=stlf(train,method="ets")
summary(ets_model)
#check accuracy of the model
accuracy(ets_model,as.numeric(test))
#ETS
ets_model=stlf(my_ts,method="ets")
#check accuracy of the model
accuracy(ets_model,test)
summary(ets_model)
#ETS
ets_model=stlf(train,method="ets")
#check accuracy of the model
accuracy(ets_model,test)
#ARIMA
arima_model=auto.arima(train)
accuracy(arima_model,test)
#ARIMA
arima_model=stlf(train,method="arima")
accuracy(arima_model,test)
plot(window(my_ts,start=2016),lwd=3)
lines(ets_model$fitted, col="red")
plot(forecast(ets_model,h=90,level = 95))
plot(forecast(ets_model,h=90,level = 95))
new_prices=forecast(ets_model,h=90,level = 95)
plot(forecast(ets_model,h=90, level = 95))
plot(window(my_ts,start=2016),lwd=3)
lines(ets_model$fitted, col="red")
lines(ets_model$fitted, col="red")
plot(window(my_ts,start=2016))
lines(ets_model$fitted, col="red")
plot(my_ts)
lines(ets_model$fitted, col="red")
plot(forecast(ets_model,h=90, level = 95))
new_prices$mean
new_prices=forecast(ets_model, h=90, level = 95)
plot(forecast(ets_model,h=90))
new_prices=forecast(ets_model, h=90, level = 95)
new_prices=forecast(ets_model, h=90, level = 95)
plot(forecast(ets_model,h=90, level=95 ))
plot(my_ts)
lines(ets_model$fitted, col="red")
plot(forecast(ets_model,h=90, level=95 ))
new_prices=forecast(ets_model, h=90, level = 95)
new_prices$mean
plot(new_prices$mean)
rm(list=ls())
setwd('C:\\Users\\asus\\Desktop\\Petrol Prices TS') #change this
df=read.csv('petrolPricecomplete.csv',stringsAsFactors = F)
#creating TS object
#inds <- seq(as.Date("2003-06-01"), as.Date("2018-08-28"), by = "day")
library(forecast)
library(zoo)
library(lubridate)
library(tseries)
my_ts=ts(df$y, start = c(2003,6,1) , frequency=365.25)
my_ts=tsclean(my_ts)
plot(my_ts)
#Split test and train
train=window(my_ts,start=2004,end=2016)
test=window(my_ts,start=2016)
#ETS
ets_model=stlf(train,method="ets")
summary(ets_model)
#check accuracy of the model
accuracy(ets_model,test)
plot(my_ts)
lines(ets_model$fitted, col="red")
plot(forecast(ets_model,h=90, level=95 ))
new_prices=forecast(ets_model, h=90, level = 95)
new_prices$mean
plot(new_prices$mean)
start(new_prices$mean)
df_final=data.frame(ds=0,y=as.numeric(new_prices$mean))
df_final$ds=seq(as.Date("2018-09-29"), by="days",length.out = 90)
write.csv(df_final,"PetrolPrices90days.csv",row.names = F)
#ARIMA
arima_model=stlf(train,method="arima")
arima_model
accuracy(arima_model,test)
plot(my_ts,lwd=3)
lines(arima_model$fitted,col="red")
plot(forecast(arima_model,h=90,level = 95))
new_prices=forecast(arima_model,h=90,level = 95)
new_prices$mean
plot(new_prices$mean)
